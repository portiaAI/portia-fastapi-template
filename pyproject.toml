[project]
name = "portia-python-fastapi-example"
version = "0.1.0"
description = "FastAPI example with Portia SDK integration for agentic workflows"
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
dependencies = [
    "fastapi[standard]>=0.115.14",
    "uvicorn[standard]>=0.34.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.7.0",
    "portia-sdk-python>=0.2.0",
    "python-multipart>=0.0.7",
    "python-dotenv>=1.0.0",
]

[project.scripts]
portia-fastapi = "app.cli:main"

[dependency-groups]
dev = [
    "ruff>=0.12.2",
    "pytest>=8.0.0",
    "httpx>=0.28.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=4.0.0",
]

[tool.ruff]
line-length=100

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "COM812",  # Disables checks for trailing commas as they are fixed by the formatted and running both is not recommended.
  "D203",    # Disables checks for having a blank line before a class docstring. We instead have no-blank-line-before-class (D211) enabled.
  "D213",    # Disables checks for multi-line docstrings not starting on the first line. We instead have multi-line-summary-first-line (D212) enabled.
  "EM101",   # Disables checks for missing exception message arguments. We prefer single-line exception statements for simplicity and terseness.
  "EM102",   # Disables checks for f-string usage in exception messages. We prefer single-line exception statements with f-strings for simplicity and terseness.
  "G004",
  "TRY003",  # Disables checks for long error messages. We prefer to provide as much context to users as possible but want to avoid a proliferation of error classes.
]

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = [
  "S101",    # Disables check for asserts. Asserts in test cases can be useful.
  "PLR2004", # Disables magic number checks. Its normal to assert using magic numbers for things like array length.
  "INP001",  # Disables checks for implicit namespace packages. Tests are not part of the package.
]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
  "pydantic.BaseModel", # Tells ruff that BaseModel instances need to be evaluated at runtime.
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true  # Allows **kwargs: Any in type signatures.

[tool.ruff.lint.pylint]
max-args = 10

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short --strict-markers"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "asyncio: Async tests",
]
asyncio_mode = "auto"
